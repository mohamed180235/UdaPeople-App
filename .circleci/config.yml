version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI V2
    steps:
      - run:
          name: Install AWS CLI V2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
            
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            # Delete Frontend stack
            aws cloudformation delete-stack --stack-name udapeople-front-end-<<parameters.Workflow_ID>>
            # Delete Backend stack
            aws cloudformation delete-stack --stack-name udapeople-back-end-<<parameters.Workflow_ID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Front-end Unit Tests 
          command: |
            cd frontend
            npm install
            npm run test 
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Back-end unit Tests 
          command: |
            cd backend
            npm install
            npm run test 
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run: 
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical         
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache: 
          keys: [backend-build]
      # Your job code here
      - run: 
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment   

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "4f:ea:dc:e7:f2:d2:ac:49:d6:68:25:fe:90:a0:a4:42"
      # attach workspace
      - attach_workspace:
          at: ~/ 
      # Install dependencies
      - install_awscli
      - install_ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      #Here's where you will add some code to rollback on failure  
      - destroy-environment   

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0  
    steps:
      # Checkout code from git
      - checkout
      # restore backend cashe
      - restore_cache:
          keys: [backend-build]
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to KVDB 
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: cimg/python:3.10
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - install_awscli
  #     - install_nodejs
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #     #       # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy-environment
  #     - revert-migrations
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: cimg/python:3.10
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "4f:ea:dc:e7:f2:d2:ac:49:d6:68:25:fe:90:a0:a4:42"    
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/       
  #     - restore_cache: 
  #         keys: [backend-build]
  #     - install_ansible
  #     - install_awscli
  #     - install_nodejs
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           sudo apt update
  #           sudo apt-get install tar gzip -y
  #     - run:
  #         name: Package backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           tar -czvf artifact.tar.gz dist/* package*
  #           cd .. 
  #           mkdir .circleci/ansible/roles/deploy/files
  #           cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here

  #           export TYPEORM_MIGRATIONS_DIR=./migrations
  #           export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
  #           export TYPEORM_MIGRATIONS=./migrations/*.ts

  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #     - image: cimg/python:3.10
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_nodejs
  #     - install_awscli
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           sudo apt install -y curl
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}" 
  #           if curl "${API_URL}/api/status" | grep "ok"
  #           then
  #               exit 0
  #           else
  #               exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #           echo ${URL} 
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #               # Change this to 0 after the job fails
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: cimg/python:3.10
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - install_awscli
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #           sudo apt install -y curl
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #           # Change the initial stack name, as applicable to you
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name "InitialStack" \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #     # Here's where you will add some code to rollback on failure  
  #     - destroy-environment
  #     - revert-migrations

  # cleanup:
  #     docker:
  #       # Docker image here
  #     - image: amazon/aws-cli
  #     steps:
  #       # Checkout code from git
  #       - checkout
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             export OldWorkflowID=$(aws cloudformation \
  #                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                 --no-paginate --output text)
  #             echo OldWorkflowID: "${OldWorkflowID}"
  #             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
  #             echo Stack names: "${STACKS[@]}" 
  #             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #             then
  #             # your code goes here
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #             else
  #             # your code goes here
  #               echo "Can't Clean"
  #             fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
